<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="17.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <PreferredToolArchitecture>x64</PreferredToolArchitecture>
  </PropertyGroup>
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="MinSizeRel|x64">
      <Configuration>MinSizeRel</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="RelWithDebInfo|x64">
      <Configuration>RelWithDebInfo</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{28469826-8585-3018-9A50-03905E15AC83}</ProjectGuid>
    <Keyword>Win32Proj</Keyword>
    <WindowsTargetPlatformVersion>10.0.26100.0</WindowsTargetPlatformVersion>
    <Platform>x64</Platform>
    <ProjectName>copy_resources</ProjectName>
    <VCProjectUpgraderObjectName>NoUpgrade</VCProjectUpgraderObjectName>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>Utility</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v143</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>Utility</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v143</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'" Label="Configuration">
    <ConfigurationType>Utility</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v143</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'" Label="Configuration">
    <ConfigurationType>Utility</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v143</PlatformToolset>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup>
    <_ProjectFileVersion>10.0.20506.1</_ProjectFileVersion>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">$(Platform)\$(Configuration)\$(ProjectName)\</IntDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(Platform)\$(Configuration)\$(ProjectName)\</IntDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">$(Platform)\$(Configuration)\$(ProjectName)\</IntDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">$(Platform)\$(Configuration)\$(ProjectName)\</IntDir>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <Midl>
      <AdditionalIncludeDirectories>D:\github-intellidea\CmakeExampleProject\external;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <Midl>
      <AdditionalIncludeDirectories>D:\github-intellidea\CmakeExampleProject\external;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">
    <Midl>
      <AdditionalIncludeDirectories>D:\github-intellidea\CmakeExampleProject\external;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">
    <Midl>
      <AdditionalIncludeDirectories>D:\github-intellidea\CmakeExampleProject\external;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
  </ItemDefinitionGroup>
  <ItemGroup>
    <CustomBuild Include="D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\4a1c5c31657b4deaef7e7d4afe3f6fbd\copy_resources.rule">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'"></Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo start copying models and shaders at &amp;&amp; date /T &amp;&amp; echo The current time is: %TIME%
if %errorlevel% neq 0 goto :cmEnd
"C:\Program Files\CMake\bin\cmake.exe" -E make_directory D:/github-intellidea/CmakeExampleProject/build/Debug/resources/models
if %errorlevel% neq 0 goto :cmEnd
"C:\Program Files\CMake\bin\cmake.exe" -E make_directory D:/github-intellidea/CmakeExampleProject/build/Debug/resources/shaders
if %errorlevel% neq 0 goto :cmEnd
"C:\Program Files\CMake\bin\cmake.exe" -E make_directory D:/github-intellidea/CmakeExampleProject/build/Debug/resources/tex
if %errorlevel% neq 0 goto :cmEnd
for /R D:/github-intellidea/CmakeExampleProject/resources/models %%G in ( *.obj *.png *.meta *.mtl *.png.meta ) do ( "C:/Program Files/CMake/bin/cmake.exe" -E copy_if_different %%G D:/github-intellidea/CmakeExampleProject/build/Debug/resources/models/%%~nxG )
if %errorlevel% neq 0 goto :cmEnd
for /R D:/github-intellidea/CmakeExampleProject/resources/shaders %%G in ( *.frag *.spv *.vert ) do ( "C:/Program Files/CMake/bin/cmake.exe" -E copy_if_different %%G D:/github-intellidea/CmakeExampleProject/build/Debug/resources/shaders/%%~nxG )
if %errorlevel% neq 0 goto :cmEnd
for /R D:/github-intellidea/CmakeExampleProject/resources/tex %%G in ( *.jpg *.png ) do ( "C:/Program Files/CMake/bin/cmake.exe" -E copy_if_different %%G D:/github-intellidea/CmakeExampleProject/build/Debug/resources/tex/%%~nxG )
if %errorlevel% neq 0 goto :cmEnd
echo Copy completed at &amp;&amp; date /T &amp;&amp; echo The current time is: %TIME%
if %errorlevel% neq 0 goto :cmEnd
echo Start removing files at &amp;&amp; date /T &amp;&amp; echo The current time is: %TIME%
if %errorlevel% neq 0 goto :cmEnd
for /R D:/github-intellidea/CmakeExampleProject/build/Debug/resources/models %%G in ( *.obj *.png *.meta *.mtl *.png.meta ) do @if not exist D:/github-intellidea/CmakeExampleProject/resources/models/%%~nxG ( echo Deleting %%G &amp; del /Q %%G )
if %errorlevel% neq 0 goto :cmEnd
for /R D:/github-intellidea/CmakeExampleProject/build/Debug/resources/shaders %%G in ( *.frag *.spv *.vert ) do @if not exist D:/github-intellidea/CmakeExampleProject/resources/shaders/%%~nxG ( echo Deleting %%G &amp; del /Q %%G )
if %errorlevel% neq 0 goto :cmEnd
for /R D:/github-intellidea/CmakeExampleProject/build/Debug/resources/tex %%G in ( *.jpg *.png ) do @if not exist D:/github-intellidea/CmakeExampleProject/resources/tex/%%~nxG ( echo Deleting %%G &amp; del /Q %%G )
if %errorlevel% neq 0 goto :cmEnd
echo Remove completed at &amp;&amp; date /T &amp;&amp; echo The current time is: %TIME%
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\copy_resources</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <VerifyInputsAndOutputsExist Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</VerifyInputsAndOutputsExist>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'"></Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo start copying models and shaders at &amp;&amp; date /T &amp;&amp; echo The current time is: %TIME%
if %errorlevel% neq 0 goto :cmEnd
"C:\Program Files\CMake\bin\cmake.exe" -E make_directory D:/github-intellidea/CmakeExampleProject/build/Release/resources/models
if %errorlevel% neq 0 goto :cmEnd
"C:\Program Files\CMake\bin\cmake.exe" -E make_directory D:/github-intellidea/CmakeExampleProject/build/Release/resources/shaders
if %errorlevel% neq 0 goto :cmEnd
"C:\Program Files\CMake\bin\cmake.exe" -E make_directory D:/github-intellidea/CmakeExampleProject/build/Release/resources/tex
if %errorlevel% neq 0 goto :cmEnd
for /R D:/github-intellidea/CmakeExampleProject/resources/models %%G in ( *.obj *.png *.meta *.mtl *.png.meta ) do ( "C:/Program Files/CMake/bin/cmake.exe" -E copy_if_different %%G D:/github-intellidea/CmakeExampleProject/build/Release/resources/models/%%~nxG )
if %errorlevel% neq 0 goto :cmEnd
for /R D:/github-intellidea/CmakeExampleProject/resources/shaders %%G in ( *.frag *.spv *.vert ) do ( "C:/Program Files/CMake/bin/cmake.exe" -E copy_if_different %%G D:/github-intellidea/CmakeExampleProject/build/Release/resources/shaders/%%~nxG )
if %errorlevel% neq 0 goto :cmEnd
for /R D:/github-intellidea/CmakeExampleProject/resources/tex %%G in ( *.jpg *.png ) do ( "C:/Program Files/CMake/bin/cmake.exe" -E copy_if_different %%G D:/github-intellidea/CmakeExampleProject/build/Release/resources/tex/%%~nxG )
if %errorlevel% neq 0 goto :cmEnd
echo Copy completed at &amp;&amp; date /T &amp;&amp; echo The current time is: %TIME%
if %errorlevel% neq 0 goto :cmEnd
echo Start removing files at &amp;&amp; date /T &amp;&amp; echo The current time is: %TIME%
if %errorlevel% neq 0 goto :cmEnd
for /R D:/github-intellidea/CmakeExampleProject/build/Release/resources/models %%G in ( *.obj *.png *.meta *.mtl *.png.meta ) do @if not exist D:/github-intellidea/CmakeExampleProject/resources/models/%%~nxG ( echo Deleting %%G &amp; del /Q %%G )
if %errorlevel% neq 0 goto :cmEnd
for /R D:/github-intellidea/CmakeExampleProject/build/Release/resources/shaders %%G in ( *.frag *.spv *.vert ) do @if not exist D:/github-intellidea/CmakeExampleProject/resources/shaders/%%~nxG ( echo Deleting %%G &amp; del /Q %%G )
if %errorlevel% neq 0 goto :cmEnd
for /R D:/github-intellidea/CmakeExampleProject/build/Release/resources/tex %%G in ( *.jpg *.png ) do @if not exist D:/github-intellidea/CmakeExampleProject/resources/tex/%%~nxG ( echo Deleting %%G &amp; del /Q %%G )
if %errorlevel% neq 0 goto :cmEnd
echo Remove completed at &amp;&amp; date /T &amp;&amp; echo The current time is: %TIME%
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\copy_resources</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <VerifyInputsAndOutputsExist Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</VerifyInputsAndOutputsExist>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'"></Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo start copying models and shaders at &amp;&amp; date /T &amp;&amp; echo The current time is: %TIME%
if %errorlevel% neq 0 goto :cmEnd
"C:\Program Files\CMake\bin\cmake.exe" -E make_directory D:/github-intellidea/CmakeExampleProject/build/MinSizeRel/resources/models
if %errorlevel% neq 0 goto :cmEnd
"C:\Program Files\CMake\bin\cmake.exe" -E make_directory D:/github-intellidea/CmakeExampleProject/build/MinSizeRel/resources/shaders
if %errorlevel% neq 0 goto :cmEnd
"C:\Program Files\CMake\bin\cmake.exe" -E make_directory D:/github-intellidea/CmakeExampleProject/build/MinSizeRel/resources/tex
if %errorlevel% neq 0 goto :cmEnd
for /R D:/github-intellidea/CmakeExampleProject/resources/models %%G in ( *.obj *.png *.meta *.mtl *.png.meta ) do ( "C:/Program Files/CMake/bin/cmake.exe" -E copy_if_different %%G D:/github-intellidea/CmakeExampleProject/build/MinSizeRel/resources/models/%%~nxG )
if %errorlevel% neq 0 goto :cmEnd
for /R D:/github-intellidea/CmakeExampleProject/resources/shaders %%G in ( *.frag *.spv *.vert ) do ( "C:/Program Files/CMake/bin/cmake.exe" -E copy_if_different %%G D:/github-intellidea/CmakeExampleProject/build/MinSizeRel/resources/shaders/%%~nxG )
if %errorlevel% neq 0 goto :cmEnd
for /R D:/github-intellidea/CmakeExampleProject/resources/tex %%G in ( *.jpg *.png ) do ( "C:/Program Files/CMake/bin/cmake.exe" -E copy_if_different %%G D:/github-intellidea/CmakeExampleProject/build/MinSizeRel/resources/tex/%%~nxG )
if %errorlevel% neq 0 goto :cmEnd
echo Copy completed at &amp;&amp; date /T &amp;&amp; echo The current time is: %TIME%
if %errorlevel% neq 0 goto :cmEnd
echo Start removing files at &amp;&amp; date /T &amp;&amp; echo The current time is: %TIME%
if %errorlevel% neq 0 goto :cmEnd
for /R D:/github-intellidea/CmakeExampleProject/build/MinSizeRel/resources/models %%G in ( *.obj *.png *.meta *.mtl *.png.meta ) do @if not exist D:/github-intellidea/CmakeExampleProject/resources/models/%%~nxG ( echo Deleting %%G &amp; del /Q %%G )
if %errorlevel% neq 0 goto :cmEnd
for /R D:/github-intellidea/CmakeExampleProject/build/MinSizeRel/resources/shaders %%G in ( *.frag *.spv *.vert ) do @if not exist D:/github-intellidea/CmakeExampleProject/resources/shaders/%%~nxG ( echo Deleting %%G &amp; del /Q %%G )
if %errorlevel% neq 0 goto :cmEnd
for /R D:/github-intellidea/CmakeExampleProject/build/MinSizeRel/resources/tex %%G in ( *.jpg *.png ) do @if not exist D:/github-intellidea/CmakeExampleProject/resources/tex/%%~nxG ( echo Deleting %%G &amp; del /Q %%G )
if %errorlevel% neq 0 goto :cmEnd
echo Remove completed at &amp;&amp; date /T &amp;&amp; echo The current time is: %TIME%
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\copy_resources</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <VerifyInputsAndOutputsExist Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</VerifyInputsAndOutputsExist>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'"></Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo start copying models and shaders at &amp;&amp; date /T &amp;&amp; echo The current time is: %TIME%
if %errorlevel% neq 0 goto :cmEnd
"C:\Program Files\CMake\bin\cmake.exe" -E make_directory D:/github-intellidea/CmakeExampleProject/build/RelWithDebInfo/resources/models
if %errorlevel% neq 0 goto :cmEnd
"C:\Program Files\CMake\bin\cmake.exe" -E make_directory D:/github-intellidea/CmakeExampleProject/build/RelWithDebInfo/resources/shaders
if %errorlevel% neq 0 goto :cmEnd
"C:\Program Files\CMake\bin\cmake.exe" -E make_directory D:/github-intellidea/CmakeExampleProject/build/RelWithDebInfo/resources/tex
if %errorlevel% neq 0 goto :cmEnd
for /R D:/github-intellidea/CmakeExampleProject/resources/models %%G in ( *.obj *.png *.meta *.mtl *.png.meta ) do ( "C:/Program Files/CMake/bin/cmake.exe" -E copy_if_different %%G D:/github-intellidea/CmakeExampleProject/build/RelWithDebInfo/resources/models/%%~nxG )
if %errorlevel% neq 0 goto :cmEnd
for /R D:/github-intellidea/CmakeExampleProject/resources/shaders %%G in ( *.frag *.spv *.vert ) do ( "C:/Program Files/CMake/bin/cmake.exe" -E copy_if_different %%G D:/github-intellidea/CmakeExampleProject/build/RelWithDebInfo/resources/shaders/%%~nxG )
if %errorlevel% neq 0 goto :cmEnd
for /R D:/github-intellidea/CmakeExampleProject/resources/tex %%G in ( *.jpg *.png ) do ( "C:/Program Files/CMake/bin/cmake.exe" -E copy_if_different %%G D:/github-intellidea/CmakeExampleProject/build/RelWithDebInfo/resources/tex/%%~nxG )
if %errorlevel% neq 0 goto :cmEnd
echo Copy completed at &amp;&amp; date /T &amp;&amp; echo The current time is: %TIME%
if %errorlevel% neq 0 goto :cmEnd
echo Start removing files at &amp;&amp; date /T &amp;&amp; echo The current time is: %TIME%
if %errorlevel% neq 0 goto :cmEnd
for /R D:/github-intellidea/CmakeExampleProject/build/RelWithDebInfo/resources/models %%G in ( *.obj *.png *.meta *.mtl *.png.meta ) do @if not exist D:/github-intellidea/CmakeExampleProject/resources/models/%%~nxG ( echo Deleting %%G &amp; del /Q %%G )
if %errorlevel% neq 0 goto :cmEnd
for /R D:/github-intellidea/CmakeExampleProject/build/RelWithDebInfo/resources/shaders %%G in ( *.frag *.spv *.vert ) do @if not exist D:/github-intellidea/CmakeExampleProject/resources/shaders/%%~nxG ( echo Deleting %%G &amp; del /Q %%G )
if %errorlevel% neq 0 goto :cmEnd
for /R D:/github-intellidea/CmakeExampleProject/build/RelWithDebInfo/resources/tex %%G in ( *.jpg *.png ) do @if not exist D:/github-intellidea/CmakeExampleProject/resources/tex/%%~nxG ( echo Deleting %%G &amp; del /Q %%G )
if %errorlevel% neq 0 goto :cmEnd
echo Remove completed at &amp;&amp; date /T &amp;&amp; echo The current time is: %TIME%
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\copy_resources</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
      <VerifyInputsAndOutputsExist Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</VerifyInputsAndOutputsExist>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\github-intellidea\CmakeExampleProject\CMakeLists.txt">
      <UseUtf8Encoding>Always</UseUtf8Encoding>
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Building Custom Rule D:/github-intellidea/CmakeExampleProject/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" -SD:/github-intellidea/CmakeExampleProject -BD:/github-intellidea/CmakeExampleProject/build --check-stamp-file D:/github-intellidea/CmakeExampleProject/build/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeCInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeCXXInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeCommonLanguageInclude.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeGenericSystem.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeInitializeConfigs.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeLanguageInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeRCInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeSystemSpecificInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeSystemSpecificInitialize.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Compiler\CMakeCommonCompilerMacros.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Compiler\MSVC-C.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Compiler\MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Compiler\MSVC.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\FindPackageHandleStandardArgs.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\FindPackageMessage.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\FindVulkan.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Internal\CMakeCLinkerInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Internal\CMakeCXXLinkerInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Internal\CMakeCommonLinkerInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Linker\Windows-MSVC-C.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Linker\Windows-MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Linker\Windows-MSVC.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Windows-Initialize.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Windows-MSVC-C.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Windows-MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Windows-MSVC.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Windows.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\WindowsPaths.cmake;D:\github-intellidea\CmakeExampleProject\GenerateCompileCommands.cmake;D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\3.31.1\CMakeCCompiler.cmake;D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\3.31.1\CMakeCXXCompiler.cmake;D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\3.31.1\CMakeRCCompiler.cmake;D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\3.31.1\CMakeSystem.cmake;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Building Custom Rule D:/github-intellidea/CmakeExampleProject/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" -SD:/github-intellidea/CmakeExampleProject -BD:/github-intellidea/CmakeExampleProject/build --check-stamp-file D:/github-intellidea/CmakeExampleProject/build/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeCInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeCXXInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeCommonLanguageInclude.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeGenericSystem.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeInitializeConfigs.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeLanguageInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeRCInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeSystemSpecificInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeSystemSpecificInitialize.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Compiler\CMakeCommonCompilerMacros.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Compiler\MSVC-C.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Compiler\MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Compiler\MSVC.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\FindPackageHandleStandardArgs.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\FindPackageMessage.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\FindVulkan.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Internal\CMakeCLinkerInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Internal\CMakeCXXLinkerInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Internal\CMakeCommonLinkerInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Linker\Windows-MSVC-C.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Linker\Windows-MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Linker\Windows-MSVC.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Windows-Initialize.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Windows-MSVC-C.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Windows-MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Windows-MSVC.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Windows.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\WindowsPaths.cmake;D:\github-intellidea\CmakeExampleProject\GenerateCompileCommands.cmake;D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\3.31.1\CMakeCCompiler.cmake;D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\3.31.1\CMakeCXXCompiler.cmake;D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\3.31.1\CMakeRCCompiler.cmake;D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\3.31.1\CMakeSystem.cmake;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Building Custom Rule D:/github-intellidea/CmakeExampleProject/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" -SD:/github-intellidea/CmakeExampleProject -BD:/github-intellidea/CmakeExampleProject/build --check-stamp-file D:/github-intellidea/CmakeExampleProject/build/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeCInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeCXXInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeCommonLanguageInclude.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeGenericSystem.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeInitializeConfigs.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeLanguageInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeRCInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeSystemSpecificInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeSystemSpecificInitialize.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Compiler\CMakeCommonCompilerMacros.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Compiler\MSVC-C.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Compiler\MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Compiler\MSVC.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\FindPackageHandleStandardArgs.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\FindPackageMessage.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\FindVulkan.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Internal\CMakeCLinkerInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Internal\CMakeCXXLinkerInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Internal\CMakeCommonLinkerInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Linker\Windows-MSVC-C.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Linker\Windows-MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Linker\Windows-MSVC.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Windows-Initialize.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Windows-MSVC-C.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Windows-MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Windows-MSVC.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Windows.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\WindowsPaths.cmake;D:\github-intellidea\CmakeExampleProject\GenerateCompileCommands.cmake;D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\3.31.1\CMakeCCompiler.cmake;D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\3.31.1\CMakeCXXCompiler.cmake;D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\3.31.1\CMakeRCCompiler.cmake;D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\3.31.1\CMakeSystem.cmake;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Building Custom Rule D:/github-intellidea/CmakeExampleProject/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" -SD:/github-intellidea/CmakeExampleProject -BD:/github-intellidea/CmakeExampleProject/build --check-stamp-file D:/github-intellidea/CmakeExampleProject/build/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeCInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeCXXInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeCommonLanguageInclude.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeGenericSystem.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeInitializeConfigs.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeLanguageInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeRCInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeSystemSpecificInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\CMakeSystemSpecificInitialize.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Compiler\CMakeCommonCompilerMacros.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Compiler\MSVC-C.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Compiler\MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Compiler\MSVC.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\FindPackageHandleStandardArgs.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\FindPackageMessage.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\FindVulkan.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Internal\CMakeCLinkerInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Internal\CMakeCXXLinkerInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Internal\CMakeCommonLinkerInformation.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Linker\Windows-MSVC-C.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Linker\Windows-MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Linker\Windows-MSVC.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Windows-Initialize.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Windows-MSVC-C.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Windows-MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Windows-MSVC.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\Windows.cmake;C:\Program Files\CMake\share\cmake-3.31\Modules\Platform\WindowsPaths.cmake;D:\github-intellidea\CmakeExampleProject\GenerateCompileCommands.cmake;D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\3.31.1\CMakeCCompiler.cmake;D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\3.31.1\CMakeCXXCompiler.cmake;D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\3.31.1\CMakeRCCompiler.cmake;D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\3.31.1\CMakeSystem.cmake;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <None Include="D:\github-intellidea\CmakeExampleProject\build\CMakeFiles\copy_resources">
    </None>
  </ItemGroup>
  <ItemGroup />
  <ItemGroup>
    <ProjectReference Include="D:\github-intellidea\CmakeExampleProject\build\ZERO_CHECK.vcxproj">
      <Project>{32F9F15E-63B2-3CE6-8987-88F59D4AE584}</Project>
      <Name>ZERO_CHECK</Name>
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <CopyToOutputDirectory>Never</CopyToOutputDirectory>
    </ProjectReference>
    <ProjectReference Include="D:\github-intellidea\CmakeExampleProject\build\run_compile_script.vcxproj">
      <Project>{3A22E0C5-3489-3822-95FA-AE0DF7E0A74F}</Project>
      <Name>run_compile_script</Name>
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <CopyToOutputDirectory>Never</CopyToOutputDirectory>
    </ProjectReference>
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>